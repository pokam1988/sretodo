{{- if .Values.postgres.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgres
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  replicas: {{ .Values.postgres.replicas }}
  selector:
    matchLabels:
      {{- include "sretodo.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgres
  template:
    metadata:
      labels:
        {{- include "sretodo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgres
    spec:
      # OpenShift compatible security context
      securityContext:
        fsGroup: 1011430000
      containers:
        - name: postgres
          image: "{{ .Values.postgres.image }}:{{ .Values.postgres.tag }}"
          imagePullPolicy: {{ .Values.postgres.pullPolicy }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1011430000
            runAsGroup: 1011430000
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          # Add health checks
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $(POSTGRES_USER)
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - $(POSTGRES_USER)
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
            - name: POSTGRES_USER
              value: {{ .Values.postgres.env.POSTGRES_USER }}
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgres.env.POSTGRES_PASSWORD }}
            - name: POSTGRES_DB
              value: {{ .Values.postgres.env.POSTGRES_DB }}
            # Allow write permissions for OpenShift
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          resources:
            {{- toYaml .Values.postgres.resources | nindent 12 }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          {{- if .Values.postgres.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-postgres-pvc
          {{- else }}
          emptyDir: {}
          {{- end }}
---
{{- if .Values.postgres.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-postgres-pvc
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.postgres.persistence.size }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-postgres
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  type: {{ .Values.postgres.service.type }}
  ports:
    - port: 5432
      targetPort: postgres
      protocol: TCP
      name: postgres
  selector:
    {{- include "sretodo.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
{{- end }}