{{- if .Values.nginxGateway.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nginx-gateway
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: nginx-gateway
spec:
  replicas: {{ .Values.nginxGateway.replicas }}
  selector:
    matchLabels:
      {{- include "sretodo.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: nginx-gateway
  template:
    metadata:
      labels:
        {{- include "sretodo.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: nginx-gateway
    spec:
      securityContext:
        fsGroup: 1011430000
      containers:
        - name: nginx-gateway
          image: "{{ .Values.nginxGateway.image }}:{{ .Values.nginxGateway.tag }}"
          imagePullPolicy: {{ .Values.nginxGateway.pullPolicy }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1011430000
            runAsGroup: 1011430000
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 5
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: nginx-cache
              mountPath: /var/cache/nginx
            - name: nginx-run
              mountPath: /var/run
            - name: nginx-tmp
              mountPath: /tmp
          resources:
            {{- toYaml .Values.nginxGateway.resources | nindent 12 }}
      volumes:
        - name: nginx-config
          configMap:
            name: {{ .Release.Name }}-nginx-config
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
        - name: nginx-tmp
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-config
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: nginx-gateway
data:
  default.conf: |
    # Inhalt für nginx/default.conf (angepasst für Kubernetes Services)

    # Upstream-Definitionen sind für K8s Services nicht nötig,
    # wir verwenden direkt die Service-Namen.

    server {
       listen 8080;
        server_name _;

        # Logging (optional)
        access_log /dev/stdout;
        error_log /dev/stderr warn;

        # API Endpunkte weiterleiten
        # Wir verwenden die internen K8s Service DNS-Namen

        # 1. Alle Todo-Anfragen mit korrektem Pfad
        location /api/todos/ {
            proxy_pass http://{{ include "sretodo.fullname" . }}-java-todo:{{ .Values.javaTodo.service.port }}/todos;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS Header
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Fallback für Todo ohne Slash am Ende (für POST requests)
        location = /api/todos {
            proxy_pass http://{{ include "sretodo.fullname" . }}-java-todo:{{ .Values.javaTodo.service.port }}/todos;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS Header
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Spezifische Todos mit ID (für PUT/GET/DELETE Anfragen an /api/todos/{id})
        location ~ ^/api/todos/([0-9]+)$ {
            proxy_pass http://{{ include "sretodo.fullname" . }}-java-todo:{{ .Values.javaTodo.service.port }}/todos/$1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS Header
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        location /api/statistics {
            proxy_pass http://{{ include "sretodo.fullname" . }}-dotnet-statistik:{{ .Values.dotnetStatistik.service.port }}/statistics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS Header
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Direkter Zugriff ohne /api Präfix
        location = /statistics {
            proxy_pass http://{{ include "sretodo.fullname" . }}-dotnet-statistik:{{ .Values.dotnetStatistik.service.port }}/statistics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS Header
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        location /api/pomodoro/ {
            # Rewrite ist hier wichtig, um /api/pomodoro/ zu entfernen
            rewrite ^/api/pomodoro/(.*)$ /$1 break;
            proxy_pass http://{{ include "sretodo.fullname" . }}-python-pomodoro:{{ .Values.pythonPomodoro.service.port }};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS Header
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # OTel-Collector Endpunkte direkt weitergeben
        location /v1/traces {
            proxy_pass http://{{ include "sretodo.fullname" . }}-otel-collector:4318/v1/traces;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            
            # CORS-Header für non-OPTIONS Anfragen
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Frontend Location
        location / {
            proxy_pass http://{{ include "sretodo.fullname" . }}-frontend:{{ .Values.frontend.service.port }};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            proxy_intercept_errors on;
            error_page 404 = @fallback;
        }

        # Fallback für Angular Routing
        location @fallback {
             # URI in proxy_pass entfernen für named location
             proxy_pass http://{{ include "sretodo.fullname" . }}-frontend:{{ .Values.frontend.service.port }};
             # Setze den Request URI explizit für den Upstream
             proxy_set_header X-Rewrite-URI /index.html; # Header als Hinweis
             rewrite .* /index.html break; # Interne Umschreibung

             # Original Header beibehalten
             proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Forwarded-Proto $scheme;
             proxy_redirect off;
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-nginx-gateway
  labels:
    {{- include "sretodo.labels" . | nindent 4 }}
    app.kubernetes.io/component: nginx-gateway
spec:
  type: {{ .Values.nginxGateway.service.type }}
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    {{- include "sretodo.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: nginx-gateway
{{- end }}